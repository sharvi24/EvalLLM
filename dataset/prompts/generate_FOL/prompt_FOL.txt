"""prover9 from nltk requires the first order logic in a different way than normally written FOL, refer the below code to understand.

>>> from nltk.inference import *
>>> from nltk.sem import LogicParser, ApplicationExpression
>>> lp = LogicParser()
>>> bicond = lp.parse('(exists x.(man(x) and walks(x)) <-> exists x.(walks(x) and man(x)))')
>>> get_prover(bicond, prover_name='tableau').prove()
True


Generate first order logic for the given statement in the same way so that it can be directly parsed by nltk.
"If the Hulk does not wake up, then Thor is not happy"

"""